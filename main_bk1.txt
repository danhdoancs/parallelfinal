/* 
 * File:   main.cpp
 * Author: david
 *
 * Created on April 15, 2015, 10:05 PM
 */

#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include <mpi.h>
#include <string.h> 
#include <cstdlib>
#include <iostream>
#include <fstream>

using namespace std;
void reductionPhase();
void computePi(int j, int i);
void backSubstitutionPhase();
void debug_array(double* arr, int size, string msg);
void debug(string msg, double varr);

//vars
long str_len;
int noOfProcesses;
int myId;
double s_time, e_time;

const int N = 8;
const int M = N - 1;
const int n = log2(N);

double** A = new double*[n];
double** B = new double*[n];
double** C = new double*[n];
double** D = new double*[n];
double* x = new double[M];
double* P = new double[4];

/*
 * 
 */
int main1(int argc, char** argv) {

    //init first vars
    A[0] = new double[M] {
        0, 5, 1, 3, 6, 7, 2
    };

    B[0] = new double[M] {
        1, 2, 9, 3, 5, 8, 4
    };

    C[0] = new double[M] {
        3, 5, 1, 3, 4, 2, 0
    };
    D[0] = new double[M] {
        6, 2, 4, 1, 5, 7, 8
    };

    for (int i = 1; i < n; i++) {
        //init
        A[i] = new double[M];
        B[i] = new double[M];
        C[i] = new double[M];
        D[i] = new double[M];

        for (int j = 0; j < M; j++) {
            A[i][j] = 0;
            B[i][j] = 0;
            C[i][j] = 0;
            D[i][j] = 0;
        }
    }

    //communication
    MPI_Init(NULL, NULL);
    MPI_Comm_size(MPI_COMM_WORLD, &noOfProcesses);
    MPI_Comm_rank(MPI_COMM_WORLD, &myId);

    //check if noOfProcess is not equal n
    if (noOfProcesses != M) {
        cout << "Please use " << M << "processors\n";
        return -1;
    }

    // wait for all to come together
    MPI_Barrier(MPI_COMM_WORLD);
    s_time = MPI_Wtime();

    //run
    reductionPhase();

    backSubstitutionPhase();

    MPI_Barrier(MPI_COMM_WORLD);
    e_time = MPI_Wtime();

    if (myId != 0)
        printf("Test: process %d received message %ld bytes in %f seconds\n", myId, str_len, e_time - s_time);

    MPI_Finalize();

    //debug_array(x, M, "array X");
    return 0;
}

void backSubstitutionPhase() {
    int k = pow(2, n - 1);
    x[k] = D[n - 1][k] / B[n - 1][k];

    for (int k = n - 1; k > 0; k--) {
        int h = pow(2, k - 1);
        for (int i = h; i < pow(2, n); i += 2 * h) {
            if (myId == i)
                x[i] = (D[k - 1][i] - A[k - 1][i] * x[i - h] - C[k - 1][i] * x[i + h]) / (B[k - 1][i]);
        }
    }
}

void reductionPhase() {
    for (int j = 1; j < n; j++) {

        //        debug("Reduction: j", j);
        //        debug("Reduction: n", n);

        for (int i = pow(2, j); i < pow(2, n); i += pow(2, j)) {
            //processor 0 inits
            if (myId == 0) {

            } else {

                //MPI_Recv(msg, str_len, MPI_CHAR, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            }
            //            debug("Reduction: i", i);

            if (myId == i) {
                //                debug("Reduction: myId", myId);
                computePi(j, i);
                
                //send values to other nodes
                //MPI_Send(greeting, strlen(greeting) + 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
                
                break;
            }
        }
    }
}

void computePi(int j, int i) {
    //init
    int h = pow(2, j - 1);
    double e, f;

    //debug("(B[j - 1][i - h])", (B[j - 1][i - h]));
    //debug_array(B[j - 1], M, "B");
    if (i <= 0 or i >= N) {
        A[j][i] = 0;
        B[j][i] = 1;
        C[j][i] = 0;
        D[j][i] = 0;
        x[i] = 0;
    } else {
        e = -(A[j - 1][i]) / (B[j - 1][i - h]);
        f = -(C[j - 1][i]) / (B[j - 1][i + h]);
        A[j][i] = e * A[j - 1][i - h];
        C[j][i] = f * C[j - 1][i + h];
        B[j][i] = B[j - 1][i] + e * C[j - 1][i - h] + f * A[j - 1][i + h];
        D[j][i] = D[j - 1][i] + e * D[j - 1][i - h] + f * D[j - 1][i + h];
    }

    debug_array(A[j - 1], M, "A " + std::to_string(j - 1));
    debug_array(A[j], M, "A " + std::to_string(j));
    debug_array(B[j - 1], M, "B " + std::to_string(j - 1));
    debug_array(B[j], M, "B " + std::to_string(j));
    printf("Processor %i computePi(j:%i, i:%i, h:%i, e:%f, A[j - 1][i]:%f, B[j - 1][i - h]:%f, f:%f, C[j - 1][i]:%f, B[j - 1][i + h]:%f, A[j - 1][i - h]:%f, A[j][i]:%f)\n", i, j, i, h, e, A[j - 1][i], B[j - 1][i - h], f, C[j - 1][i], B[j - 1][i + h], A[j - 1][i - h], A[j][i]);
}

//debug functions

void debug(const char *msg, double varr) {

    cout << "\nDebugging....." << msg << ": <" << varr << ">\n";
    fflush(stdout);
}

//debug a array

void debug_array(double* arr, int size, string msg = "") {
    int i = 0;
    cout << "\nDebugging..." << msg << ": ";

    for (; i < size; i++)
        cout << arr[i] << "  ";
    cout << "\n";

    fflush(stdout);
}

void array_show(int* arr, int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << "  ";
}