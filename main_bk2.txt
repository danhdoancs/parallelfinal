/*
 * File:   Algorithm2.cpp
 * Author: david
 * 
 * Created on April 15, 2015, 10:05 PM
 */

#include <stdio.h>
#include <math.h>
#include <unistd.h>
#include <mpi.h>
#include <string.h>
#include <cstdlib>
#include <iostream>
#include <fstream>

using namespace std;
void reductionPhase();
void computePi(int j, int i);
void backSubstitutionPhase();
void array_remove(double* arr, int size, int removeIdx);
void debug_array(double* arr, int size, string msg);
void debug(string msg, double varr);

//vars
long str_len;
int noOfProcesses;
int myId;
double s_time, e_time;

int N, n, h, localSize, localPiSize, localFlops = 0;
long globalFlops = 0;

double *A, *B, *C, *D, *X;

double* x;
double** P;
double* Po;
double* Pnext;
double* Pprevious;

/*
 *
 */
int main(int argc, char** argv) {

    //communication
    MPI_Init(NULL, NULL);
    MPI_Comm_size(MPI_COMM_WORLD, &noOfProcesses);
    MPI_Comm_rank(MPI_COMM_WORLD, &myId);

	localSize = pow(2,1);
    N = noOfProcesses * localSize;
    n = log2(N);
    P = new double*[n];
    localPiSize = localSize * 4;
    x = new double[localSize];

    // wait for all to come together
    MPI_Barrier(MPI_COMM_WORLD);
    s_time = MPI_Wtime();
    
    //process start from 1
    myId++;

    //run
    if (myId == 1) {
        //broadcast initial values
        A = new double[N];
        B = new double[N];
        C = new double[N];
        D = new double[N];

        A[0] = 0;
        A[N - 1] = 1;
        B[0] = -4;
        B[N - 1] = -4;
        C[0] = 1;
        C[N - 1] = 0;
        D[0] = -3;
        D[N - 1] = -3;

        for (int i = 1; i < N - 1; i++) {

            A[i] = 1;
            B[i] = -4;
            C[i] = 1;
            D[i] = -2;
        }

        Po = new double[N * 4];
        for (int i = 0, j = 0; i < N; i++) {
            Po[j++] = A[i];
            Po[j++] = B[i];
            Po[j++] = C[i];
            Po[j++] = D[i];
        }
        debug_array(Po, N * 4, "@@@@@@@@@@@@@@@@@@@@@@@@@ Po");
        debug_array(A, N, "Vector A");
        debug_array(B, N, "Vector B");
        debug_array(C, N, "Vector C");
        debug_array(D, N, "Vector D");
        X = new double[N];
    }

    //broadcast values
    //debug("@@@@@@@@@@@@@@@@@@@@@@@@@ Po size", sizeof (Po));
    //debug("@@@@@@@@@@@@@@@@@@@@@@@@@ No of processors", noOfProcesses);
    P[0] = new double[localPiSize];
    MPI_Scatter(Po, localPiSize, MPI_DOUBLE, P[0], localPiSize, MPI_DOUBLE, 0, MPI_COMM_WORLD);
    debug_array(P[0], localPiSize, "%%%%%%%%%%%%%%%%%%%%%%%%% P[0]");

    reductionPhase();
    backSubstitutionPhase();

    MPI_Gather(&x, localSize, MPI_DOUBLE, X, localSize, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    MPI_Barrier(MPI_COMM_WORLD);
    e_time = MPI_Wtime();
    
    //sum up the flops   
	MPI_Reduce(&localFlops, &globalFlops, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (myId == 1) {
        debug_array(X, N, "array X");
        printf("Run time: %f seconds\n", (e_time - s_time));
        printf("Number of processors: %d\n", noOfProcesses);
        printf("Size of matrix A: 2^%d x 2^%d\n", n, n);
        printf("Number of floating point operations: %ld\n", globalFlops);
    }

    MPI_Finalize();
    return 0;
}

void debug_exit() {
    MPI_Barrier(MPI_COMM_WORLD);
    MPI_Finalize();
    exit(0);
}

void backSubstitutionPhase() {
    for (int i = 1; i <= noOfProcesses; i++) {
        if (myId == i) {
			for(int j = 0; j < localPiSize; j += 4) {
				//            debug_array(P[n],4, )
					x[j] = P[n][j+3] / (P[n][j+1]);
				    printf("i:%d - %f = %f / %f\n", i, x[j], P[n][j+3], P[n][j+1]);
				 
				 //increase flops
				 localFlops++;
			}
        }
    }
}

void reductionPhase() {

    for (int j = 1; j <= n; j++) {

        h = pow(2, j - 1);
        Pnext = new double[4 * localSize];
        Pprevious = new double[4 * localSize];

        for (int i = 1; i <= noOfProcesses; i++) {
            //debug("Reduction: i", (double)i)            
            if (myId == i - h && i - h > 0) {
          //      printf("J:%d - Processor %i send %f,%f,%f,%f to %i\n", j, myId, P[j - 1][0], P[j - 1][1], P[j - 1][2], P[j - 1][3], i);
                MPI_Send(P[j - 1], localPiSize, MPI_DOUBLE, i-1, 0, MPI_COMM_WORLD);
            } else if (myId == i + h && i + h <= noOfProcesses) {
           //     printf("J:%d - Processor %i send %f,%f,%f,%f to %i\n", j, myId, P[j - 1][0], P[j - 1][1], P[j - 1][2], P[j - 1][3], i);
                MPI_Send(P[j - 1], localPiSize, MPI_DOUBLE, i-1, 1, MPI_COMM_WORLD);
            } else if (myId == i) {

                if (i - h > 0) {
                    //printf("Processor %i receive from %i and %i\n", myId, i - h, i + h);
                    MPI_Recv(Pprevious, localPiSize, MPI_DOUBLE, i - h - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            //        printf("J:%d - Processor %i received %f,%f,%f,%f from %i\n", j, myId, Pprevious[0], P[j - 1][1], P[j - 1][2], P[j - 1][3], i - h);
                } else {
				        Pprevious = new double[localPiSize]; 
				        for(int p = 0; p < localPiSize; p += 4)
				        {
							Pprevious[p] = 0;
							Pprevious[p+1] = 1;
							Pprevious[p+2] = 0;
							Pprevious[p+3] = 0;
						};
				}           
                
                if (i + h <= noOfProcesses) {

                    MPI_Recv(Pnext, localPiSize, MPI_DOUBLE, i + h - 1, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            //        printf("J:%d - Processor %i received %f,%f,%f,%f from %i\n", j, myId, Pnext[0], P[j - 1][1], P[j - 1][2], P[j - 1][3], i + h);
                } else {
					Pnext = new double[localPiSize];
			        for(int p = 0; p < localPiSize; p += 4)
				        {
							Pnext[p] = 0;
							Pnext[p+1] = 1;
							Pnext[p+2] = 0;
							Pnext[p+3] = 0;
						};
				}
                computePi(j, i);
            }
        }
    }
}

void computePi(int j, int i) {
    //init
    double e, f;
	
    debug_array(P[j - 1], localPiSize, "P " + std::to_string(j - 1) + " of " + std::to_string(i));
    debug_array(Pprevious, localPiSize, "Pprevious " + std::to_string(j - 1) + " of " + std::to_string(i));
    debug_array(Pnext, localPiSize, "Pnext " + std::to_string(j - 1) + " of " + std::to_string(i));

    P[j] = new double[localPiSize];

	for(int p = 0; p < localPiSize; p += 4) {
		e = -(P[j - 1][p]) / (Pprevious[p+1]);
		//printf("Processor %i(j:%d) - e:%f = -P[j-1][0]:%f / Pprevious[1]:%f\n", i, j, e, P[j - 1][0], Pprevious[1]);

		f = -(P[j - 1][p+2]) / (Pnext[p+1]);

		P[j][p] = e * Pprevious[p];
		P[j][p+2] = f * Pnext[p+2];
		P[j][p+1] = P[j - 1][p+1] + e * Pprevious[p+2] + f * Pnext[p];
		P[j][p+3] = P[j - 1][p+3] + e * Pprevious[p+3] + f * Pnext[p+3];

		//debug_array(P[j], 4, "P" + std::to_string(j) + " of processor " + std::to_string(myId));
		printf("Processor %i computePi(j:%i, i:%i, h:%i, e:%f, f:%f)\n", i, j, i, h, e, f);
		
		//increase flops
		localFlops += 12;
	}	
}

//debug functions
void debug(string msg, double varr) {

    cout << "\nDebugging....." << msg << ": <" << varr << ">\n";
    fflush(stdout);
}

//debug a array

void debug_array(double* arr, int size, string msg = "") {
    int i = 0;
    cout << "\nDebugging..." << msg << ": ";

    for (; i < size; i++)
        cout << arr[i] << "  ";
    cout << "\n";

    fflush(stdout);
}

void array_show(double* arr, int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << "  ";
}

void array_remove(double* arr, int size, int removeIdx) {
    for (int i = removeIdx + 1; i < size; i++) {
        arr[i - 1] = arr[i];
    }
}


